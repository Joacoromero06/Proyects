{-
1. Todo es valor

En Haskell:

3 es un valor del tipo Int.
"hola" es un valor del tipo String.
doble es un valor del tipo Int -> Int.
Incluso \x -> x+1 es un valor, del tipo Num a => a -> a.

üëâ No hay una distinci√≥n ontol√≥gica fuerte entre ‚Äúdatos‚Äù y ‚Äúfunciones‚Äù: ambos son valores, solo que de diferentes tipos. Eso es lo que permite que una funci√≥n se pase como argumento o se devuelva como resultado
-}

{-
Haskell no tiene ‚Äúsentencias‚Äù (como un for o if imperativo que no devuelve nada), 
    sino expresiones que siempre producen un valor:
        3+4 ‚Üí expresi√≥n aritm√©tica que eval√∫a a un valor 7.
        if True then 1 else 2 ‚Üí expresi√≥n condicional que eval√∫a a 1.
        doble 5 ‚Üí expresi√≥n funcional que eval√∫a a 10.
Una funci√≥n sin aplicar (doble) tambi√©n es una expresi√≥n, que se eval√∫a a la propia funci√≥n como valor.
-}

{-
Una funci√≥n define una relaci√≥n entre entradas y salidas (por medio de una ecuaci√≥n).

A la vez, define una transformaci√≥n: un mecanismo que toma un valor y devuelve otro.

Haskell no obliga a elegir una sola interpretaci√≥n; su sem√°ntica formal
 (basada en c√°lculo lambda y reescritura de expresiones) unifica estas visiones.
-}

{-
Todo programa es una expresi√≥n.

Toda expresi√≥n tiene un tipo.

El tipo dice qu√© clase de valor va a resultar cuando esa expresi√≥n se eval√∫e.
-}